Теоретические вопросы:
1.  В чем различие между ASP.NET MVC и WebAPI?
По сути, WebApi представляет некую веб службу, с которой может взаимодействовать любое приложение, а MVC полноценное веб приложение. В Api контроллере мы передаем просто какие-то данные, а в MVC передаем их в представление.

2.  Что такое модульное тестирование?
Собственно, механизм тестирования отдельных блоков кода, чтобы убедиться, что они работают так, как мы предполагаем.

3.  Для чего необходимы библиотеки Moq и Bogus?
Moq для эмуляции поведения каких-либо методов или объектов, если мы не хотим или не можем зависеть от конкретной реализации этих методов или объектов. Bogus позволяет генерировать и подкидывать фейковые данные в поля объектов.
 
4.  Кратко опишите TDD подход в разработке приложений.
Разработка через тестирование. Сначала пишем тесты, а потом реализуем функционал. Test fails -> Test passes -> Refactor

5.  Дайте развернутое описание SOLID.
Набор подходов к программированию.

Принцип единственной ответственности - Класс и его методы должны иметь единственное назначение и решать единственную задачу.

Принцип открытости\закрытости - система должна быть построена таким образом, что все ее последующие изменения должны быть реализованы с помощью добавления нового кода, а не изменения уже существующего.

Принцип подстановки Лисков - объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы. Производный класс должен быть взаимозаменяем с родительским классом.

Принцип разделения интерфейсов - лучше много разделенных интерфейсов, чем один универсальный, мы не должны реализовывать методы, которыми не пользуемся.

Принцип инверсии зависимостей - не должно быть зависимости от конкретных реализаций, только от абстракций (интерфейсов).



6.  Опишите структуру HTTP запроса и ответа. Привидите схему взаимодействия по принципу клиент-сервер.
Запрос состоит из 3 основных частей - строки(метод, url), заголовков(различная информация), тело (данные, передающиеся в запросе). Ответ состоит из строки статуса(версия протокола, код ответа), заголовков с различной информацией и тела. Взаимодействие происходит по принципу: Клиент формирует запрос и отправляет его на сервер -> сервер его обрабатывает, генерирует необходимые данные и возвращает ответ клиенту  

7.  Опишите суть паттерна MVC.
Шаблон архитектуры приложений, разделяющих его на 3 компонента. Модель (описывает используемые данные и логику связанную с ними), представление (визуальная часть или пользовательский интерфейс), контроллер (обработка запроса, связь между представлением и данными)

8.  Коротко опишите архитектуру REST.
Стиль построения  приложений, имеющий набор требований. Модель клиент-сервер, отсутствие состояния, кэширование, единообразие интерфейса, слои

9.  Что такое многослойная архитектура?
Архитектура постройки приложения. Классическая трехуровненвая состоит из уровня представления (представления и их компоненты, стили, контроллеры), уровень бихнес-логики (вся необходимая логика приложения, вычисления, обработка полученных данных от уровня представления), уровень доступа к данным (модели, описывающие сущности, хранящиеся в базе данных, репозитории для непосредственной работы с базой данных)
 
10. Что такое DI и IoC?
Ivnersion of control - принцип программирования, используемый для уменьшеньшения связанности (зависимости) одних компонентов приложения от других. Dependency Injection - одна из реализаций этого принципа.

11. Опишите для чего нужен ORM?
Технология, позволяющая представить данные из базы данных в виде классов, объектов и их полей. Нужен для для абстрагирования от самой базы данных и работы с данными независимо от типа хранилища.

12. Для чего необходимо логгирование в приложении?
Логи - своего рода летопись работы приложения. Необходимо для мониторинга работы приложения, получения какой-либо информации о его работе, поиска и выявлених ошибок.

13. Перечислите отличия в маршрутизации MVC и WebAPI
Отсутствют Area и Action, только путь к эндпоинту.